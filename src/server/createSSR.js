import React from 'react';
import {basename as routerBasename} from '../universal/utils/basename';
import {match} from 'react-router';
import Html from './Html';
import {push} from 'react-router-redux';
import {renderToStaticMarkup} from 'react-dom-stream/server';
import fs from 'fs';
import {join, basename} from 'path';
import promisify from 'es6-promisify';
import {setUserAgent} from '../universal/ducks/navigator';
import winston from 'winston';
import leadStorageOptions from '../universal/utils/leadStorageOptions';
import {syncLeadSuccess, syncLeadError} from '../universal/ducks/leads.js'
import {setIdentity, setFunnel} from '../universal/ducks/analytics';
import {getLeadById} from './graphql/models/Leads/helpers';
import analytics from './analytics';
import URL from 'url';
import uuid from 'node-uuid';
import funnel from '../universal/utils/funnel';
import version from '../universal/utils/version';

const {cookieLeadId} = leadStorageOptions;
const pageTitle = 'Four Week First Step | Elite Guard Training';

// https://github.com/systemjs/systemjs/issues/953

async function renderApp(req, res, store, assets, renderProps) {
  const location = renderProps ? renderProps.location : '/';
  const userAgent = req.headers['user-agent'];
  const leadId = req.cookies && req.cookies[cookieLeadId] || undefined;
  const requestUrl = req.url;

  let analyticsTrackData = {
    event: 'Page Requested',
    properties: {
      funnel: funnel.name,
      version: version,
      url: URL.parse(requestUrl).pathname,
      originalUrl: requestUrl,
      userAgent: req.headers['user-agent'] || undefined,
      leadId: req.cookies[cookieLeadId] || undefined,
      ipAddress: req.headers['cf-connecting-ip'] || undefined,
      ipCountry: req.headers['cf-ipcountry'] || undefined,
      language: req.headers['accept-language'] || undefined
    }
  };
  if (req.query) {
    analyticsTrackData.properties.source = req.query.source || req.query.utm_source;
    analyticsTrackData.properties.keyword = req.query.keyword || req.query.utm_term;
  }

  winston.log('info', 'Rendering App', analyticsTrackData);

  // just look away, this is ugly & wrong https://github.com/callemall/material-ui/pull/2172
  GLOBAL.navigator = {userAgent: userAgent};
  // Needed so some components can render based on location
  store.dispatch(push(location));
  // Needed by some components for Autoprexing css generated by Radium
  store.dispatch(setUserAgent(userAgent));
  // Needed for analytics to identify which funnel the events are coming from
  store.dispatch(setFunnel(funnel.name));

  if (leadId) {
    winston.log('info', 'Found lead cookie', {leadId, funnel, version});

    const lead = await getLeadById(leadId);
    if (lead) {
      winston.log('info', 'Lead Found', {lead});
      store.dispatch(setIdentity(lead.email));
      store.dispatch(syncLeadSuccess(lead));

      if (analytics) {
        let analyticsPeopleData = {
          userId: lead.email,
          traits: {
            userAgent: req.headers['user-agent'] || undefined,
            ip: req.headers['cf-connecting-ip'] || undefined,
            ipCountry: req.headers['cf-ipcountry'] || undefined,
            language: req.headers['accept-language'] || undefined
          }
        };

        analytics.identify(analyticsPeopleData);
        analyticsTrackData.userId = lead.email;
      }

    } else {
      winston.log('info', 'Lead not found', {leadId});
      // analyticsTrackData.userId = uuid.v4();
      // store.dispatch(setIdentity(analyticsTrackData.userId));
      store.dispatch(syncLeadError({error: 'Lead Not Found'}));
    }

    winston.log('info', 'Rendering App');

    // analytics && analytics.track(analyticsTrackData);

    winston.log('info', 'Rendering App 2');

    const htmlStream = renderToStaticMarkup(
      <Html
        title={pageTitle}
        store={store}
        assets={assets}
        renderProps={renderProps}
      />
    );

    res.write('<!DOCTYPE html>');
    htmlStream.pipe(res, {end: false});
    htmlStream.on('end', () => res.end());

  } else {
    winston.log('info', 'No lead cookie', analyticsTrackData);

    // analyticsTrackData.userId = uuid.v4();
    // store.dispatch(setIdentity(analyticsTrackData.userId));
    // analytics && analytics.track(analyticsTrackData);

    const htmlStream = renderToStaticMarkup(
      <Html
        title={pageTitle}
        store={store}
        assets={assets}
        renderProps={renderProps}
      />
    );

    res.write('<!DOCTYPE html>');
    htmlStream.pipe(res, {end: false});
    htmlStream.on('end', () => res.end());
  }
}

export default async function createSSR(req, res, store) {
  const requestUrl = req.url.replace(routerBasename, '').replace('//', '/');

  let logInfo = {
    url: requestUrl,
    headers: {
      userAgent: req.headers['user-agent'] || undefined,
      leadId: req.cookies[cookieLeadId] || undefined,
      ip: req.headers['cf-connecting-ip'] || undefined,
      ipCountry: req.headers['cf-ipcountry'] || undefined,
      language: req.headers['accept-language'] || undefined
    }
  };

  if (process.env.NODE_ENV === 'production') {

    const makeRoutes = require('../../build/prerender');
    const assets = require('../../build/assets.json');
    const readFile = promisify(fs.readFile);
    assets.manifest.text = await readFile(join(__dirname, '..', '..', 'build', basename(assets.manifest.js)), 'utf-8');
    const routes = makeRoutes(store);

    match({routes, location: requestUrl}, (error, redirectLocation, renderProps) => {
      if (error) {
        logInfo.errorNumber = 500;
        winston.log('info', 'Requested SSR', logInfo);

        res.status(500).send(error.message);
      } else if (redirectLocation) {
        const redirectTo = redirectLocation.pathname + redirectLocation.search;
        logInfo.redirect = true;
        logInfo.error = 'Server Error';
        winston.log('info', 'Requested SSR', logInfo);

        res.redirect(redirectTo);
      } else if (renderProps) {
        logInfo.routeMatch = true;
        if (requestUrl !== '/__webpack_hmr') {
          winston.log('info', 'Requested SSR', logInfo);
        }

        renderApp(req, res, store, assets, renderProps);
      } else {
        logInfo.errorNumber = 404;
        logInfo.error = 'Not Found';
        winston.log('info', 'Requested SSR', logInfo);

        res.status(404).send('Not found');
      }

    });

  } else {
    winston.log('info', 'Requested Development Doc', logInfo);
    // just send a cheap html doc + stringified store
    renderApp(req, res, store);
  }
}

